name: Release to NPM

on:
  push:
    branches: [main]
    paths: ["package.json"]
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., 0.1.0, 1.0.0)"
        required: true
        type: string
      create_release:
        description: "Create GitHub release"
        type: boolean
        default: true
      dry_run:
        description: "Dry run (build but do not publish)"
        type: boolean
        default: false

permissions:
  contents: write
  id-token: write # For NPM provenance
  pull-requests: read

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      should_release: ${{ steps.check.outputs.should_release }}
      prev_version: ${{ steps.check.outputs.prev_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Get version from package.json
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=$(node -p "require('./package.json').version")
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Current version: $VERSION"

      - name: Check if version changed
        id: check
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "prev_version=manual" >> $GITHUB_OUTPUT
            echo "üöÄ Manual release triggered for version ${{ steps.version.outputs.version }}"
          else
            # Check if version changed in the last commit
            PREV_VERSION=$(git show HEAD~1:package.json | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).version" 2>/dev/null || echo "unknown")
            CURR_VERSION="${{ steps.version.outputs.version }}"

            echo "prev_version=$PREV_VERSION" >> $GITHUB_OUTPUT

            if [ "$PREV_VERSION" != "$CURR_VERSION" ] && [ "$PREV_VERSION" != "unknown" ]; then
              echo "should_release=true" >> $GITHUB_OUTPUT
              echo "üìà Version changed: $PREV_VERSION ‚Üí $CURR_VERSION"
            else
              echo "should_release=false" >> $GITHUB_OUTPUT
              echo "‚è∏Ô∏è  Version unchanged: $CURR_VERSION"
            fi
          fi

  release:
    needs: check-version
    if: needs.check-version.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.dry_run == 'true' && 'dry-run' || 'release' }}
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
          cache: "pnpm"

      - name: Install dependencies
        run: |
          echo "üì¶ Installing dependencies..."
          pnpm install --frozen-lockfile
          echo "‚úÖ Dependencies installed"

      - name: Update version (if manual)
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "üîÑ Updating version to ${{ needs.check-version.outputs.version }}"

          # Update version in package.json
          pnpm version ${{ needs.check-version.outputs.version }} --no-git-tag-version

          # Commit the version update
          git config --global user.name "opper-bot"
          git config --global user.email "bot@opper.ai"
          git add package.json
          git commit -m "chore: bump version to ${{ needs.check-version.outputs.version }}"
          git push

      - name: Run quality checks
        run: |
          echo "üîç Running quality checks..."

          # Run linting
          echo "  üßπ Running ESLint..."
          pnpm lint
          echo "  ‚úÖ Linting passed"

          # Run TypeScript type checking
          echo "  üîß Running TypeScript type check..."
          pnpm exec tsc --noEmit
          echo "  ‚úÖ Type checking passed"

      - name: Run tests
        run: |
          echo "üß™ Running tests..."
          pnpm test
          echo "‚úÖ Tests passed"

      - name: Run integration tests
        run: |
          echo "üß™ Running integration tests..."
          pnpm test:integration
          echo "‚úÖ Integration tests passed"

      - name: Build package
        run: |
          echo "üî® Building package..."
          pnpm build
          echo "‚úÖ Build completed successfully"

      - name: Validate build artifacts
        run: |
          echo "üîç Validating build artifacts..."

          # Check dist output
          if [ -d "dist" ]; then
            echo "  ‚úÖ dist output found"
            ls -la dist/ | head -10
          else
            echo "  ‚ùå dist output missing"
            exit 1
          fi

          # Check CommonJS output
          if [ -f "dist/index.cjs" ]; then
            echo "  ‚úÖ CommonJS output found"
            echo "  üìè CommonJS size: $(du -h dist/index.cjs | cut -f1)"
          else
            echo "  ‚ùå CommonJS output missing"
            exit 1
          fi

          # Check ESM output
          if [ -f "dist/index.mjs" ]; then
            echo "  ‚úÖ ESM output found"
            echo "  üìè ESM size: $(du -h dist/index.mjs | cut -f1)"
          else
            echo "  ‚ùå ESM output missing"
            exit 1
          fi

          # Check type definitions
          if [ -f "dist/index.d.ts" ]; then
            echo "  ‚úÖ Type definitions found"
          else
            echo "  ‚ùå Type definitions missing"
            exit 1
          fi

          # Verify package contents
          echo "  üì¶ Package contents preview:"
          pnpm pack --dry-run | head -20

      - name: Run smoke tests
        run: |
          echo "üß™ Running smoke tests..."

          # Test CommonJS import
          node -e "
            try {
              const sdk = require('./dist/index.cjs');
              console.log('‚úÖ CommonJS import successful');

              // Test basic instantiation
              if (typeof sdk.Agent !== 'undefined') {
                console.log('‚úÖ Agent export available');
              } else {
                throw new Error('Agent export missing');
              }

            } catch (error) {
              console.error('‚ùå CommonJS test failed:', error.message);
              process.exit(1);
            }
          "

          # Test ESM import
          node --input-type=module -e "
            (async () => {
              try {
                const sdk = await import('./dist/index.mjs');
                console.log('‚úÖ ESM import successful');

                if (typeof sdk.Agent !== 'undefined') {
                  console.log('‚úÖ Agent export available (ESM)');
                } else {
                  throw new Error('Agent export missing (ESM)');
                }

              } catch (error) {
                console.error('‚ùå ESM test failed:', error.message);
                process.exit(1);
              }
            })();
          "

          echo "‚úÖ Smoke tests passed"

      - name: Publish to NPM
        if: github.event.inputs.dry_run != 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "üöÄ Publishing to NPM..."

          # Show what will be published
          echo "üì¶ Package info:"
          pnpm pack --dry-run | head -10

          # Publish with provenance
          if pnpm publish --access public --provenance --no-git-checks; then
            echo "‚úÖ Successfully published to NPM"

            # Show published package info
            VERSION="${{ needs.check-version.outputs.version }}"
            PACKAGE_NAME=$(node -p "require('./package.json').name")
            echo "üîó NPM Package: https://www.npmjs.com/package/$PACKAGE_NAME/v/$VERSION"
          else
            echo "‚ùå NPM publish failed"
            exit 1
          fi

      - name: Create GitHub Release
        if: github.event.inputs.create_release != 'false' && github.event.inputs.dry_run != 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.check-version.outputs.version }}"
          PREV_VERSION="${{ needs.check-version.outputs.prev_version }}"
          TAG_NAME="v$VERSION"
          PACKAGE_NAME=$(node -p "require('./package.json').name")

          echo "üè∑Ô∏è  Creating GitHub release $TAG_NAME..."

          # Create the tag
          git tag "$TAG_NAME"
          git push origin "$TAG_NAME"

          # Generate changelog if we have a previous version
          CHANGELOG=""
          if [ "$PREV_VERSION" != "manual" ] && [ "$PREV_VERSION" != "unknown" ]; then
            PREV_TAG="v$PREV_VERSION"
            if git tag | grep -q "^$PREV_TAG$"; then
              echo "üìù Generating changelog from $PREV_TAG to $TAG_NAME..."
              CHANGELOG=$(git log --pretty=format:"- %s (%h)" "$PREV_TAG..$TAG_NAME" | head -20)
            fi
          fi

          # Generate release notes
          RELEASE_NOTES="$(cat <<EOF
          ## üöÄ Opper Agent TypeScript SDK v$VERSION

          This release contains the latest updates to the Opper Agent TypeScript SDK.

          ### üì¶ Installation
          \`\`\`bash
          npm install $PACKAGE_NAME@$VERSION
          # or
          yarn add $PACKAGE_NAME@$VERSION
          # or
          pnpm add $PACKAGE_NAME@$VERSION
          \`\`\`

          ### üîß Features
          - ‚úÖ Full TypeScript support with strong typing
          - ‚úÖ Production-ready agent orchestration
          - ‚úÖ Opper platform integration
          - ‚úÖ Comprehensive tooling support
          - ‚úÖ Memory and context management
          - ‚úÖ MCP (Model Context Protocol) integration
          - ‚úÖ CommonJS and ESM module support

          $(if [ -n "$CHANGELOG" ]; then echo "### üìã Changes in this release"; echo "$CHANGELOG"; fi)

          ### üîó Links
          - [NPM Package](https://www.npmjs.com/package/$PACKAGE_NAME/v/$VERSION)
          - [Documentation](https://docs.opper.ai)
          - [Examples](https://github.com/opper-ai/opperai-agent-sdk-node/tree/main/examples)

          ### üìö Getting Started

          \`\`\`typescript
          import { Agent } from "$PACKAGE_NAME";

          const agent = new Agent({
            name: "MyAgent",
            instructions: "You are a helpful assistant",
            tools: [],
          });

          const result = await agent.process("Hello!");
          console.log(result);
          \`\`\`

          ### ü§ñ SDK Information
          This is the official TypeScript SDK for building agents with Opper AI.

          - **Generated**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - **Module Formats**: CommonJS + ESM
          - **TypeScript**: Full type definitions included
          - **Node.js**: >=20 required

          ---

          **Full Changelog**: https://github.com/opper-ai/opperai-agent-sdk-node/compare/v$PREV_VERSION...v$VERSION
          EOF
          )"

          # Create the release
          gh release create "$TAG_NAME" \
            --title "üöÄ Opper Agent TypeScript SDK v$VERSION" \
            --notes "$RELEASE_NOTES" \
            --latest

          echo "‚úÖ GitHub release created: https://github.com/opper-ai/opperai-agent-sdk-node/releases/tag/$TAG_NAME"

      - name: Post-release summary
        run: |
          VERSION="${{ needs.check-version.outputs.version }}"
          PREV_VERSION="${{ needs.check-version.outputs.prev_version }}"
          PACKAGE_NAME=$(node -p "require('./package.json').name")

          echo ""
          echo "üéâ Release Summary"
          echo "=================="
          echo "üì¶ Package: $PACKAGE_NAME"
          echo "üì¶ Version: $VERSION"
          if [ "$PREV_VERSION" != "manual" ] && [ "$PREV_VERSION" != "unknown" ]; then
            echo "‚¨ÜÔ∏è  Upgraded from: $PREV_VERSION"
          fi
          echo "üèóÔ∏è  Build: ‚úÖ Successful"
          echo "üß™ Tests: ‚úÖ Passed"

          if [ "${{ github.event.inputs.dry_run }}" == "true" ]; then
            echo "üö´ Dry run: Package built but not published"
          else
            echo "üì§ NPM: ‚úÖ Published"
            echo "üîó NPM: https://www.npmjs.com/package/$PACKAGE_NAME/v/$VERSION"

            if [ "${{ github.event.inputs.create_release }}" != "false" ]; then
              echo "üè∑Ô∏è  GitHub Release: ‚úÖ Created"
              echo "üîó Release: https://github.com/opper-ai/opperai-agent-sdk-node/releases/tag/v$VERSION"
            fi
          fi

          echo ""
          echo "üéØ Next steps:"
          echo "  1. Verify package is available on NPM"
          echo "  2. Test installation in a fresh project"
          echo "  3. Update any dependent projects"
          echo "  4. Announce the release if needed"

  dry-run-summary:
    needs: [check-version, release]
    if: github.event.inputs.dry_run == 'true' && needs.check-version.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Dry run summary
        run: |
          echo "üö´ DRY RUN COMPLETED"
          echo "==================="
          echo "This was a dry run - no packages were published."
          echo ""
          echo "üì¶ Version: ${{ needs.check-version.outputs.version }}"
          echo "‚úÖ Build: Successful"
          echo "‚úÖ Tests: Passed"
          echo "üö´ NPM: Not published (dry run)"
          echo "üö´ GitHub Release: Not created (dry run)"
          echo ""
          echo "To publish for real, run the workflow again with 'dry_run: false'"
